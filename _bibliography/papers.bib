---
---

@inproceedings{10.1145/3520304.3534045,
    author = {Garrow, Fraser and Lones, Michael A. and Stewart, Robert},
    title = {Why Functional Program Synthesis Matters (in the Realm of Genetic Programming)},
    year = {2022},
    isbn = {9781450392686},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3520304.3534045},
    doi = {10.1145/3520304.3534045},
    abstract = {In Genetic Programming (GP) systems, particularly those that target general program synthesis problems, it is common to use imperative programming languages to represent evolving code. In this work, we consider the benefits of using a purely functional, rather than an imperative, approach. We then demonstrate some of these benefits via an experimental comparison of the pure functional language Haskell and the imperative language Python when solving program synthesis benchmarks within a grammar-guided GP system. Notably, we discover that the Haskell programs yield a higher success rate on unseen data, and that the evolved programs often have a higher degree of interpretability. We also discuss the broader issues of adapting a grammar-based GP system to functional languages, and highlight some of the challenges involved with carrying out comparisons using existing benchmark suites.},
    booktitle = {Proceedings of the Genetic and Evolutionary Computation Conference Companion},
    pages = {1844â€“1853},
    numpages = {10},
    keywords = {functional programming, program synthesis, genetic programming},
    location = {Boston, Massachusetts},
    series = {GECCO '22}
}

